package main

import (
	"flag"
	"fmt"
	"log"
	"net"
	"net/http"
	"runtime"
	"strings"
	"time"
)

func main() {
	// Get current IP address
	var currentIP = "localhost"
	var addrs, err = net.InterfaceAddrs()
	if err != nil {
		log.Println("Cannot get server IP")
		log.Println(err)
	}

	for _, address := range addrs {
		// check the address type and if it is not a loopback the display it
		// = GET LOCAL IP ADDRESS
		if ipnet, ok := address.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
			if ipnet.IP.To4() != nil {
				currentIP = ipnet.IP.String()
			}
		}
	}

	// Usage doc
	// fmt.Printf("Usage: file_server.exe -path=\"file_path\" -port=port_number\n")
	// fmt.Printf("Default value: -path=\"%s\" -port=9000\n\n", homePath)
	
	// Set home path
	var path = "/home"
	var port = 9000
	var hide = "N"
	if runtime.GOOS == "windows" {
		path = "C:\\Users"
	}

	// Get arguments
	fpath := flag.String("path", "N/A", "home path")
	fport := flag.Int("port", -1, "web server port")
	flag.Parse()

	// If there is no arguments, request user input
	if *fpath != "N/A" {
		path = *fpath
	} else {
		fmt.Print("Input the folder for file server: ")
		fmt.Scanln(&path)
	}

	if *fport != -1 {
		port = *fport
	} else {
		fmt.Print("Input the port for file server: ")
		fmt.Scanln(&port)
	}

	fmt.Print("Do you want to hide this window after File Server started (Y/N)? ")
	fmt.Scanln(&hide)

	fmt.Printf("Serve file in: %s\n", path)
	fmt.Printf("File Server will be started on: http://%s:%d after 2 seconds\n", currentIP, port)

	err = http.ListenAndServe(fmt.Sprintf(":%d", port), http.FileServer(http.Dir(path)))
	if err != nil {
		log.Println(err)
		pauseProcess()
	}
}

// Pause program and wait user press Enter to exit
func pauseProcess() {
	fmt.Printf("\nPress Enter Key to exit...")
	fmt.Scanln()
}
